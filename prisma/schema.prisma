generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  slug           String    @unique
  description    String?   @db.Text
  icon           String?
  sortOrder      Int       @default(0)
  seoTitle       String?   @db.Text
  seoDescription String?   @db.Text
  seoKeywords    String?   @db.Text
  services       Service[]
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  url         String        @db.VarChar(255)
  description String        @db.Text
  icon        String?       @db.VarChar(255)
  clickCount  Int           @default(0)
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id])
  tags        ServiceTag[]

  @@index([categoryId])
  @@index([name])
  @@index([description(length: 768)])
  @@index([clickCount])
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  imageUrl    String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 标签模型
model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  services    ServiceTag[]

  @@index([name])
}

// 服务与标签的多对多关联模型
model ServiceTag {
  serviceId   Int
  tagId       Int
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tag         Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())

  @@id([serviceId, tagId])
  @@index([serviceId])
  @@index([tagId])
}
